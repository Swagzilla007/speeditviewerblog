"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/login/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\nclass ApiClient {\n    // Auth endpoints\n    async login(credentials) {\n        const response = await this.client.post(\"/auth/login\", credentials);\n        return response.data;\n    }\n    async getProfile() {\n        const response = await this.client.get(\"/auth/profile\");\n        return response.data;\n    }\n    async changePassword(data) {\n        const response = await this.client.post(\"/auth/change-password\", data);\n        return response.data;\n    }\n    // Posts endpoints\n    async getPosts(params) {\n        const response = await this.client.get(\"/posts\", {\n            params\n        });\n        return response.data;\n    }\n    async getPost(slug) {\n        const response = await this.client.get(\"/posts/\".concat(slug));\n        return response.data;\n    }\n    async createPost(data) {\n        const response = await this.client.post(\"/posts\", data);\n        return response.data;\n    }\n    async updatePost(id, data) {\n        const response = await this.client.put(\"/posts/\".concat(id), data);\n        return response.data;\n    }\n    async deletePost(id) {\n        const response = await this.client.delete(\"/posts/\".concat(id));\n        return response.data;\n    }\n    async getRelatedPosts(postId) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3;\n        const response = await this.client.get(\"/posts/\".concat(postId, \"/related\"), {\n            params: {\n                limit\n            }\n        });\n        return response.data;\n    }\n    // Categories endpoints\n    async getCategories() {\n        const response = await this.client.get(\"/categories\");\n        return response.data;\n    }\n    async getCategory(slug) {\n        const response = await this.client.get(\"/categories/\".concat(slug));\n        return response.data;\n    }\n    async createCategory(data) {\n        const response = await this.client.post(\"/categories\", data);\n        return response.data;\n    }\n    async updateCategory(id, data) {\n        const response = await this.client.put(\"/categories/\".concat(id), data);\n        return response.data;\n    }\n    async deleteCategory(id) {\n        const response = await this.client.delete(\"/categories/\".concat(id));\n        return response.data;\n    }\n    // Tags endpoints\n    async getTags() {\n        const response = await this.client.get(\"/tags\");\n        return response.data;\n    }\n    async getTag(slug) {\n        const response = await this.client.get(\"/tags/\".concat(slug));\n        return response.data;\n    }\n    async createTag(data) {\n        const response = await this.client.post(\"/tags\", data);\n        return response.data;\n    }\n    async updateTag(id, data) {\n        const response = await this.client.put(\"/tags/\".concat(id), data);\n        return response.data;\n    }\n    async deleteTag(id) {\n        const response = await this.client.delete(\"/tags/\".concat(id));\n        return response.data;\n    }\n    // Files endpoints\n    async getFiles(params) {\n        const response = await this.client.get(\"/files\", {\n            params\n        });\n        return response.data;\n    }\n    async getFile(id) {\n        const response = await this.client.get(\"/files/\".concat(id));\n        return response.data;\n    }\n    async uploadFile(file, data) {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        if (data) {\n            Object.keys(data).forEach((key)=>{\n                formData.append(key, data[key]);\n            });\n        }\n        const response = await this.client.post(\"/files/upload\", formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        });\n        return response.data;\n    }\n    async updateFile(id, data) {\n        const response = await this.client.put(\"/files/\".concat(id), data);\n        return response.data;\n    }\n    async deleteFile(id) {\n        const response = await this.client.delete(\"/files/\".concat(id));\n        return response.data;\n    }\n    async downloadFile(id) {\n        const response = await this.client.get(\"/files/\".concat(id, \"/download\"), {\n            responseType: \"blob\"\n        });\n        return response.data;\n    }\n    // Download requests endpoints\n    async getDownloadRequests(params) {\n        const response = await this.client.get(\"/download-requests\", {\n            params\n        });\n        return response.data;\n    }\n    async getDownloadRequest(id) {\n        const response = await this.client.get(\"/download-requests/\".concat(id));\n        return response.data;\n    }\n    async createDownloadRequest(data) {\n        const response = await this.client.post(\"/download-requests\", data);\n        return response.data;\n    }\n    async updateDownloadRequest(id, data) {\n        const response = await this.client.put(\"/download-requests/\".concat(id), data);\n        return response.data;\n    }\n    async deleteDownloadRequest(id) {\n        const response = await this.client.delete(\"/download-requests/\".concat(id));\n        return response.data;\n    }\n    // Dashboard endpoints\n    async getDashboardStats() {\n        const response = await this.client.get(\"/dashboard/stats\");\n        return response.data;\n    }\n    // Search endpoints\n    async searchPosts(query, params) {\n        const response = await this.client.get(\"/search/posts\", {\n            params: {\n                ...params,\n                q: query\n            }\n        });\n        return response.data;\n    }\n    // Utility methods\n    setAuthToken(token) {\n        localStorage.setItem(\"auth_token\", token);\n    }\n    getAuthToken() {\n        return localStorage.getItem(\"auth_token\");\n    }\n    removeAuthToken() {\n        localStorage.removeItem(\"auth_token\");\n        localStorage.removeItem(\"user\");\n    }\n    isAuthenticated() {\n        return !!this.getAuthToken();\n    }\n    constructor(){\n        this.client = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n            baseURL: \"http://localhost:5000/api\" || 0,\n            timeout: 10000,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        // Request interceptor to add auth token\n        this.client.interceptors.request.use((config)=>{\n            const token = localStorage.getItem(\"auth_token\");\n            if (token) {\n                config.headers.Authorization = \"Bearer \".concat(token);\n            }\n            return config;\n        }, (error)=>{\n            return Promise.reject(error);\n        });\n        // Response interceptor to handle auth errors\n        this.client.interceptors.response.use((response)=>response, (error)=>{\n            var _error_response;\n            if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 401) {\n                var _error_config_url, _error_config;\n                // Don't redirect if we're already on the login page or if it's a login attempt\n                const isLoginPage =  true && window.location.pathname === \"/admin/login\";\n                const isLoginAttempt = (_error_config = error.config) === null || _error_config === void 0 ? void 0 : (_error_config_url = _error_config.url) === null || _error_config_url === void 0 ? void 0 : _error_config_url.includes(\"/auth/login\");\n                localStorage.removeItem(\"auth_token\");\n                localStorage.removeItem(\"user\");\n                // Only redirect if not on login page and not a login attempt\n                if ( true && !isLoginPage && !isLoginAttempt) {\n                    window.location.href = \"/admin/login\";\n                }\n            }\n            return Promise.reject(error);\n        });\n    }\n}\n// Create and export a singleton instance\nconst apiClient = new ApiClient();\n/* harmony default export */ __webpack_exports__[\"default\"] = (apiClient);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});